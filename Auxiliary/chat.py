from Auxiliary.utils import *
from Auxiliary.llm import LLMModel

print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
llm = LLMModel()
print("–ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!\n")


# Custom functions for buttons
def delete(_, message_tg: telebot.types.Message):
    Message.botDeleteMessage(message_tg)
    # –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑—Ä–∞—â–∞–µ–º, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —à–ª–æ –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏


def clear(_, message_tg: telebot.types.Message):
    bot.clear_step_handler_by_chat_id(
        message_tg.chat.id)  # –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º step_handler
    # –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑—Ä–∞—â–∞–µ–º, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —à–ª–æ –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏


def delete_clear(*args):
    clear(*args)
    delete(*args)
    # –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑—Ä–∞—â–∞–µ–º, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —à–ª–æ –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏


# Custom functions for messages

# # Question

# # # Ask
def ask_question(message_tg: telebot.types.Message):
    clear(None, message_tg)
    Message.botDeleteMessage(message_tg)

    botMessage = message_question_ask.line(message_tg, deleting_message=False)
    bot.register_next_step_handler(botMessage, answer_question(botMessage))
    return True


# # # Answer
def answer_question(botMessage: telebot.types.Message):
    def wrapper(message_tg: telebot.types.Message):
        nonlocal botMessage
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        botMessage = message_question_answer_processing.line(botMessage)

        # ML
        try:
            question = message_tg.text
            answer = llm(question)
            embeding = llm.get_embedding(question)

            if not llm.is_question_inappropriate(question):
                operations.record_QnA(question, answer, embeding)
                Message(answer, ((Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                                         f"{question}_{answer.replace('_', '-')}_send"),),)).line(botMessage)
            else:
                Message(answer, ((button.question_again,), (button.close,),)).line(botMessage)

        except Exception as exception:
            print(f"–û—à–∏–±–∫–∞: {exception}")

            message_question_answer_error.line(botMessage)

    return wrapper


# # # Send
def send_answer(botMessage: telebot.types.Message, data: list, message_history: telebot.types.Message):
    def wrapper(message_tg: telebot.types.Message):
        nonlocal botMessage, data, message_history
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        email = message_tg.text
        question, answer = data

        try:
            html_content = f"""
                <html>
                    <body style="font-family: Arial, sans-serif; line-height: 1.6;">
                        <p>–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,</p>
                        <p>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</p>
                        <br>
    
                        <h3 style="color: #333;">–í–æ–ø—Ä–æ—Å:</h3>
                        <blockquote style="border-left: 4px solid #ddd; margin-left: 10px; padding-left: 10px;">
                            <strong>{question}</strong>
                        </blockquote>
    
                        <br>
    
                        <h3 style="color: #333;">–û—Ç–≤–µ—Ç:</h3>
                        <blockquote style="border-left: 4px solid #4CAF50; margin-left: 10px; padding-left: 10px; color: #333;">
                            <strong>{answer}</strong>
                        </blockquote>
    
                        <br>
                        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,</p>
                        <p>–ö–æ–º–∞–Ω–¥–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –†–ñ–î</p>
                    </body>
                </html>
            """
            botMessage = message_email_processing.line(botMessage)
            send_email(email, "–û—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –†–ñ–î", html_content)

            message = Message(f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É {email} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>", ((button.close,),))
            message.line(botMessage)
        except Exception as exception:
            print(f"–û—à–∏–±–∫–∞: {exception}")

            message_email_error.line(botMessage)
        else:
            Message(f"{answer}\n\n"
                    f"<i>–û—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email: <u>{email}</u></i>").line(message_history)

    return wrapper


# Buttons
button = Button('', '')

# Question
Button("üìù –ó–∞–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ üìù", "question_again")

# Cancel / close
Button("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å ‚úñÔ∏è", "cancel", func=delete_clear)
Button("‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å ‚úñÔ∏è", "close", func=delete)

# Messages

# Start
message_start = Message("<b>–ü—Ä–∏–≤–µ—Ç <USERNAME>, —ç—Ç–æ –±–æ—Ç –ü–∞—Ä–∞–≤–æ–∑–∏–∫ üöÇ!</b>\n\n"
                        "<i>–ò—Å–ø–æ–ª—å–∑—É–π <b>–∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é</b> —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</i>\n"
                        "<i>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É</i>\n"
                        "<i>–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π <b>–∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é</b></i>")

# Question

# # Ask question
message_question_ask = Message("<b>–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:</b>",
                               ((button.cancel,),),
                               button.question_again,
                               func=ask_question)

# # Processing
message_question_answer_processing = Message("<b>–ì–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç...</b>")

# # Error
message_question_answer_error = Message("<b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.</b>", ((button.close,),))

# Email

# # Get
message_email_get = Message("<b>–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ <u>email</u> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>",
                            ((button.cancel,),))

# # Sending
message_email_processing = Message("<b>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...</b>")

# # Error
message_email_error = Message("<b>Email –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>",
                              ((button.close,),))
